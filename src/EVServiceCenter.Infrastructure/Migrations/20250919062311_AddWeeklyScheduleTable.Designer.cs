// <auto-generated />
using System;
using EVServiceCenter.Domain.Configurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EVServiceCenter.Infrastructure.Migrations
{
    [DbContext(typeof(EVDbContext))]
    [Migration("20250919062311_AddWeeklyScheduleTable")]
    partial class AddWeeklyScheduleTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ksf00691_team03")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("Seq_InvoiceNumber", "dbo")
                .StartsAt(100000L);

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<string>("BookingCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<int>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("EndSlotId")
                        .HasColumnType("int")
                        .HasColumnName("EndSlotID");

                    b.Property<string>("SpecialRequests")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("StartSlotId")
                        .HasColumnType("int")
                        .HasColumnName("StartSlotID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("PENDING");

                    b.Property<decimal?>("TotalEstimatedCost")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("TotalSlots")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(([EndSlotID]-[StartSlotID])+(1))", true);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.HasKey("BookingId")
                        .HasName("PK__Bookings__73951ACD58E24216");

                    b.HasIndex("CenterId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EndSlotId");

                    b.HasIndex("StartSlotId");

                    b.HasIndex("VehicleId");

                    b.HasIndex(new[] { "BookingCode" }, "UQ__Bookings__C6E56BD5C752B9AD")
                        .IsUnique();

                    b.ToTable("Bookings", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.BookingService", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("BookingId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("BookingServices", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.BookingTimeSlot", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<int>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("SlotID");

                    b.Property<int>("SlotOrder")
                        .HasColumnType("int");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("TechnicianID");

                    b.HasKey("BookingId", "SlotId");

                    b.HasIndex("SlotId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("BookingTimeSlots", "dbo", t =>
                        {
                            t.HasTrigger("TRG_BTS_Prevent_Tech_DoubleBook");

                            t.HasTrigger("TRG_BTS_Release_Tech_Slot");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Channel", b =>
                {
                    b.Property<int>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChannelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChannelId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ChannelId");

                    b.HasIndex(new[] { "Code" }, "UQ_Channels_Code")
                        .IsUnique();

                    b.ToTable("Channels", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsGuest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("NormalizedPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__A4AE64B8CC15439B");

                    b.HasIndex(new[] { "CustomerCode" }, "UQ__Customer__066785211CB53DFC")
                        .IsUnique();

                    b.HasIndex(new[] { "NormalizedPhone" }, "UX_Customers_GuestPhone")
                        .IsUnique()
                        .HasFilter("([IsGuest]=(1) AND [NormalizedPhone] IS NOT NULL AND [NormalizedPhone]<>N'')");

                    b.HasIndex(new[] { "UserId" }, "UX_Customers_UserID_NotNull")
                        .IsUnique()
                        .HasFilter("([UserID] IS NOT NULL)");

                    b.ToTable("Customers", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InventoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("int");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.HasKey("InventoryId")
                        .HasName("PK__Inventor__F5FDE6D35C44F64D");

                    b.HasIndex("PartId");

                    b.HasIndex(new[] { "CenterId", "PartId" }, "UQ_Inv_CenterPart")
                        .IsUnique();

                    b.ToTable("Inventory", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.InventoryBalance", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("WarehouseID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PartId", "WarehouseId");

                    b.HasIndex(new[] { "PartId" }, "IX_InventoryBalances_Part");

                    b.HasIndex(new[] { "WarehouseId" }, "IX_InventoryBalances_Warehouse");

                    b.ToTable("InventoryBalances", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.InventoryTransaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<int>("QtyChange")
                        .HasColumnType("int");

                    b.Property<long?>("RefId")
                        .HasColumnType("bigint")
                        .HasColumnName("RefID");

                    b.Property<string>("RefType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("WarehouseID");

                    b.HasKey("TransactionId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_InvTrans_CreatedAt");

                    b.HasIndex(new[] { "PartId", "WarehouseId" }, "IX_InvTrans_Part_Warehouse");

                    b.ToTable("InventoryTransactions", "dbo", t =>
                        {
                            t.HasTrigger("trg_NoNegativeStock");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.InventoryTransfer", b =>
                {
                    b.Property<long>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TransferID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransferId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("FromWarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("FromWarehouseID");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("PostedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("DRAFT");

                    b.Property<int>("ToWarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("ToWarehouseID");

                    b.HasKey("TransferId");

                    b.HasIndex(new[] { "FromWarehouseId" }, "IX_InvTransfers_FromWh");

                    b.HasIndex(new[] { "Status" }, "IX_InvTransfers_Status");

                    b.HasIndex(new[] { "ToWarehouseId" }, "IX_InvTransfers_ToWh");

                    b.ToTable("InventoryTransfers", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.InventoryTransferItem", b =>
                {
                    b.Property<long>("TransferId")
                        .HasColumnType("bigint")
                        .HasColumnName("TransferID");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("TransferId", "PartId")
                        .HasName("PK_InvTransferItems");

                    b.HasIndex("PartId");

                    b.ToTable("InventoryTransferItems", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BillingName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("Guest");

                    b.Property<string>("BillingPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("InvoiceType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("STANDARD");

                    b.Property<string>("NormalizedBillingPhone")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComputedColumnSql("(left(replace(replace(replace(replace(isnull([BillingPhone],N''),N' ',N''),N'-',N''),N'(',N''),N')',N''),(20)))", true);

                    b.Property<int?>("ParentInvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("ParentInvoiceID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("DRAFT");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int")
                        .HasColumnName("WorkOrderID");

                    b.HasKey("InvoiceId")
                        .HasName("PK__Invoices__D796AAD52C746B3F");

                    b.HasIndex("CustomerId");

                    b.HasIndex("WorkOrderId");

                    b.HasIndex(new[] { "InvoiceType" }, "IX_Invoices_InvoiceType");

                    b.HasIndex(new[] { "NormalizedBillingPhone" }, "IX_Invoices_NormPhone");

                    b.HasIndex(new[] { "ParentInvoiceId" }, "IX_Invoices_Parent");

                    b.HasIndex(new[] { "Status" }, "IX_Invoices_Status");

                    b.HasIndex(new[] { "InvoiceNumber" }, "UQ__Invoices__D776E9818A87403A")
                        .IsUnique();

                    b.ToTable("Invoices", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.InvoiceItem", b =>
                {
                    b.Property<int>("InvoiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceItemId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(12, 2)");

                    b.HasKey("InvoiceItemId")
                        .HasName("PK__InvoiceI__478FE0FC9644E7D3");

                    b.HasIndex("PartId");

                    b.HasIndex(new[] { "InvoiceId" }, "IX_InvoiceItems_InvoiceID");

                    b.ToTable("InvoiceItems", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.InvoicePayment", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<decimal>("AppliedAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.HasKey("InvoiceId", "PaymentId");

                    b.HasIndex("PaymentId");

                    b.ToTable("InvoicePayments", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.LeaveRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RequestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("LeaveType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("PENDING");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("TechnicianID");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.HasKey("RequestId")
                        .HasName("PK__LeaveReq__33A8519A3EC1FA1C");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("TechnicianId");

                    b.ToTable("LeaveRequests", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceChecklist", b =>
                {
                    b.Property<int>("ChecklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChecklistID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChecklistId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int")
                        .HasColumnName("WorkOrderID");

                    b.HasKey("ChecklistId")
                        .HasName("PK__Maintena__4C1D49BAAA52170A");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("MaintenanceChecklists", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceChecklistItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ItemId")
                        .HasName("PK__Maintena__727E83EB43DEA097");

                    b.ToTable("MaintenanceChecklistItems", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceChecklistResult", b =>
                {
                    b.Property<int>("ChecklistId")
                        .HasColumnType("int")
                        .HasColumnName("ChecklistID");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Performed")
                        .HasColumnType("bit");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ChecklistId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("MaintenanceChecklistResults", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceReminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReminderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderId"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date");

                    b.Property<int?>("DueMileage")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.HasKey("ReminderId")
                        .HasName("PK__Maintena__01A830A779AB1D09");

                    b.HasIndex("VehicleId");

                    b.ToTable("MaintenanceReminders", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32AE77D9ED");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Otpcode", b =>
                {
                    b.Property<int>("Otpid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OTPID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Otpid"));

                    b.Property<int>("AttemptCount")
                        .HasColumnType("int");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime>("ExpiresAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Otpcode1")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("OTPCode");

                    b.Property<string>("Otptype")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OTPType");

                    b.Property<DateTime?>("UsedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Otpid")
                        .HasName("PK__OTPCodes__5C2EC56253E54938");

                    b.HasIndex("UserId");

                    b.ToTable("OTPCodes", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Part", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("PartId")
                        .HasName("PK__Parts__7C3F0D3048808AFE");

                    b.HasIndex(new[] { "PartNumber" }, "UQ__Parts__025D30D9F2F3C21F")
                        .IsUnique();

                    b.ToTable("Parts", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("BuyerAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BuyerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BuyerPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<DateTime?>("PaidAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<long>("PayOsorderCode")
                        .HasColumnType("bigint")
                        .HasColumnName("PayOSOrderCode");

                    b.Property<string>("PaymentCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("PENDING");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__9B556A58C7B37C95");

                    b.HasIndex("InvoiceId");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_Payments_Created");

                    b.HasIndex(new[] { "Status" }, "IX_Payments_Status");

                    b.HasIndex(new[] { "PayOsorderCode" }, "UQ__Payments__0426C86F4FABC463")
                        .IsUnique();

                    b.HasIndex(new[] { "PaymentCode" }, "UQ__Payments__106D3BA8E41F72D2")
                        .IsUnique();

                    b.ToTable("Payments", "dbo", t =>
                        {
                            t.HasTrigger("tr_Payments_DefaultBuyerFromInvoice");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PromotionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionId"));

                    b.Property<string>("ApplyFor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("MaxDiscount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal?>("MinOrderAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("PromotionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.Property<int?>("UsageLimit")
                        .HasColumnType("int");

                    b.Property<int?>("UserLimit")
                        .HasColumnType("int");

                    b.HasKey("PromotionId");

                    b.HasIndex(new[] { "StartDate", "EndDate" }, "IX_Promotions_ActiveDate")
                        .HasFilter("([Status]=N'ACTIVE')");

                    b.HasIndex(new[] { "Status", "StartDate", "EndDate" }, "IX_Promotions_StatusDates");

                    b.HasIndex(new[] { "Code" }, "UQ_Promotions_Code")
                        .IsUnique();

                    b.ToTable("Promotions", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.SalesOrder", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesOrderId"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("ChannelID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("PENDING");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("WarehouseID");

                    b.HasKey("SalesOrderId");

                    b.HasIndex("CenterId");

                    b.HasIndex("CustomerId");

                    b.HasIndex(new[] { "ChannelId" }, "IX_SalesOrders_Channel");

                    b.HasIndex(new[] { "Status" }, "IX_SalesOrders_Status");

                    b.HasIndex(new[] { "WarehouseId" }, "IX_SalesOrders_Warehouse");

                    b.ToTable("SalesOrders", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.SalesOrderItem", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(12, 2)");

                    b.HasKey("SalesOrderId", "PartId");

                    b.HasIndex(new[] { "PartId" }, "IX_SalesOrderItems_Part");

                    b.ToTable("SalesOrderItems", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EstimatedDuration")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("RequiredSkills")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RequiredSlots")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ServiceId")
                        .HasName("PK__Services__C51BB0EAE5210AEC");

                    b.HasIndex("CategoryId");

                    b.ToTable("Services", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServiceCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ParentCategoryID");

                    b.HasKey("CategoryId")
                        .HasName("PK__ServiceC__19093A2BA295C1B4");

                    b.HasIndex(new[] { "ParentCategoryId" }, "IX_ServiceCategories_Parent");

                    b.ToTable("ServiceCategories", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServiceCenter", b =>
                {
                    b.Property<int>("CenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CenterId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CenterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CenterId")
                        .HasName("PK__ServiceC__398FC7D760929C24");

                    b.ToTable("ServiceCenters", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServicePackage", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PackageCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PackageId")
                        .HasName("PK__ServiceP__322035EC20239E6E");

                    b.HasIndex(new[] { "PackageCode" }, "UQ__ServiceP__94185429C3E364E2")
                        .IsUnique();

                    b.ToTable("ServicePackages", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServicePackageItem", b =>
                {
                    b.Property<int>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<decimal>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(12, 2)")
                        .HasDefaultValue(1m);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("PackageId", "ServiceId");

                    b.HasIndex(new[] { "PackageId", "SortOrder" }, "IX_SPI_Package");

                    b.HasIndex(new[] { "ServiceId" }, "IX_SPI_Service");

                    b.ToTable("ServicePackageItems", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StaffCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("StaffId")
                        .HasName("PK__Staff__96D4AAF70CFA06C8");

                    b.HasIndex("CenterId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "StaffCode" }, "UQ__Staff__D83AD812AE8FD68C")
                        .IsUnique();

                    b.ToTable("Staff", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.SystemSetting", b =>
                {
                    b.Property<string>("SettingKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("SettingKey")
                        .HasName("PK__SystemSe__01E719AC5928C2F7");

                    b.ToTable("SystemSettings", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Technician", b =>
                {
                    b.Property<int>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TechnicianID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicianId"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TechnicianCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TechnicianId")
                        .HasName("PK__Technici__301F82C180EA1203");

                    b.HasIndex("CenterId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "TechnicianCode" }, "UQ__Technici__ED64BD1AD2C78212")
                        .IsUnique();

                    b.ToTable("Technicians", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.TechnicianTimeSlot", b =>
                {
                    b.Property<int>("TechnicianSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TechnicianSlotID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicianSlotId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("SlotID");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("TechnicianID");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date");

                    b.HasKey("TechnicianSlotId")
                        .HasName("PK__Technici__8892BB75E5FCFE53");

                    b.HasIndex("SlotId");

                    b.HasIndex(new[] { "WorkDate", "SlotId" }, "IX_TTS_DateSlot");

                    b.HasIndex(new[] { "TechnicianId", "WorkDate", "SlotId" }, "UX_TTS_TechDateSlot")
                        .IsUnique();

                    b.ToTable("TechnicianTimeSlots", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.TimeSlot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SlotID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotId"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("SlotLabel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeOnly>("SlotTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.HasKey("SlotId")
                        .HasName("PK__TimeSlot__0A124A4F5ADA88F1");

                    b.HasIndex(new[] { "SlotTime" }, "UQ__TimeSlot__488B1607F122A36A")
                        .IsUnique();

                    b.ToTable("TimeSlots", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<int>("FailedLoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LockoutUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC0F533A1C");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D105349C971121")
                        .IsUnique();

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.UserPromotion", b =>
                {
                    b.Property<int>("UserPromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserPromotionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPromotionId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("PromotionID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("USED");

                    b.Property<DateTime>("UsedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("UserPromotionId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex(new[] { "CustomerId", "UsedAt" }, "IX_UserPromotions_Customer")
                        .IsDescending(false, true);

                    b.HasIndex(new[] { "PromotionId", "UsedAt" }, "IX_UserPromotions_Promotion")
                        .IsDescending(false, true);

                    b.HasIndex(new[] { "PromotionId", "InvoiceId" }, "UQ_UserPromotions_Promo_Invoice")
                        .IsUnique()
                        .HasFilter("([InvoiceID] IS NOT NULL)");

                    b.ToTable("UserPromotions", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("CurrentMileage")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateOnly?>("LastServiceDate")
                        .HasColumnType("date");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("ModelID");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)")
                        .HasColumnName("VIN");

                    b.HasKey("VehicleId")
                        .HasName("PK__Vehicles__476B54B2FA36B2E5");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModelId");

                    b.HasIndex(new[] { "LicensePlate" }, "UQ__Vehicles__026BC15C5D38E10E")
                        .IsUnique();

                    b.HasIndex(new[] { "Vin" }, "UQ__Vehicles__C5DF234C3C1DD5D3")
                        .IsUnique();

                    b.ToTable("Vehicles", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.VehicleModel", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelId"));

                    b.Property<decimal?>("BatteryCapacity")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Range")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ModelId")
                        .HasName("PK__VehicleM__E8D7A1CCEDFB4F23");

                    b.ToTable("VehicleModels", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.VwAvailableSeat", b =>
                {
                    b.Property<int?>("CinemaRoomId")
                        .HasColumnType("int")
                        .HasColumnName("Cinema_Room_ID");

                    b.Property<int?>("ColumnNumber")
                        .HasColumnType("int")
                        .HasColumnName("Column_Number");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.Property<string>("RowLabel")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("Row_Label");

                    b.Property<int>("SeatId")
                        .HasColumnType("int")
                        .HasColumnName("Seat_ID");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Seat_Number");

                    b.Property<string>("SeatType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Seat_Type");

                    b.Property<DateOnly?>("ShowDate")
                        .HasColumnType("date")
                        .HasColumnName("Show_Date");

                    b.Property<int>("ShowtimeId")
                        .HasColumnType("int")
                        .HasColumnName("Showtime_ID");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("Start_Time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.ToTable((string)null);

                    b.ToView("vw_Available_Seats", "ksf00691_team03");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WarehouseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("WarehouseId");

                    b.HasIndex(new[] { "CenterId" }, "IX_Warehouses_Center");

                    b.HasIndex(new[] { "CenterId", "Code" }, "UQ_Warehouses_Center_Code")
                        .IsUnique();

                    b.ToTable("Warehouses", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.WeeklySchedule", b =>
                {
                    b.Property<int>("WeeklyScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WeeklyScheduleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeeklyScheduleId"));

                    b.Property<TimeOnly?>("BreakEnd")
                        .HasColumnType("time")
                        .HasColumnName("BreakEnd");

                    b.Property<TimeOnly?>("BreakStart")
                        .HasColumnType("time")
                        .HasColumnName("BreakStart");

                    b.Property<byte>("BufferMinutes")
                        .HasColumnType("tinyint")
                        .HasColumnName("BufferMinutes");

                    b.Property<byte>("DayOfWeek")
                        .HasColumnType("tinyint")
                        .HasColumnName("DayOfWeek");

                    b.Property<DateOnly>("EffectiveFrom")
                        .HasColumnType("date")
                        .HasColumnName("EffectiveFrom");

                    b.Property<DateOnly?>("EffectiveTo")
                        .HasColumnType("date")
                        .HasColumnName("EffectiveTo");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("EndTime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit")
                        .HasColumnName("IsOpen");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<string>("Notes")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Notes");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("StartTime");

                    b.Property<byte>("StepMinutes")
                        .HasColumnType("tinyint")
                        .HasColumnName("StepMinutes");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("TechnicianID");

                    b.HasKey("WeeklyScheduleId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("WeeklySchedule", "ksf00691_team03");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.WorkOrder", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkOrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkOrderId"));

                    b.Property<int?>("ActualDuration")
                        .HasColumnType("int");

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("CustomerComplaints")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("FinalMileage")
                        .HasColumnType("int");

                    b.Property<int?>("InitialMileage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("NOT_STARTED");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("TechnicianID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("WorkOrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WorkPerformed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkOrderId")
                        .HasName("PK__WorkOrde__AE75517563E7EB82");

                    b.HasIndex("BookingId");

                    b.HasIndex("TechnicianId");

                    b.HasIndex(new[] { "WorkOrderNumber" }, "UQ__WorkOrde__1FA44F96DE057B33")
                        .IsUnique();

                    b.ToTable("WorkOrders", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.WorkOrderChargeProposal", b =>
                {
                    b.Property<int>("ProposalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProposalID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProposalId"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("PENDING");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int")
                        .HasColumnName("WorkOrderID");

                    b.HasKey("ProposalId")
                        .HasName("PK__WorkOrde__6F39E100BDB375C0");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderChargeProposals", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.WorkOrderChargeProposalItem", b =>
                {
                    b.Property<int>("ProposalItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProposalItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProposalItemId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<int>("ProposalId")
                        .HasColumnType("int")
                        .HasColumnName("ProposalID");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(12, 2)");

                    b.HasKey("ProposalItemId")
                        .HasName("PK_WOCPItems");

                    b.HasIndex("PartId");

                    b.HasIndex(new[] { "ProposalId", "PartId" }, "UX_WOCPItems_Proposal_Part_NotNull")
                        .IsUnique()
                        .HasFilter("([PartID] IS NOT NULL)");

                    b.ToTable("WorkOrderChargeProposalItems", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.WorkOrderPart", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int")
                        .HasColumnName("WorkOrderID");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("WorkOrderId", "PartId");

                    b.HasIndex("PartId");

                    b.ToTable("WorkOrderParts", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Booking", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.ServiceCenter", "Center")
                        .WithMany("Bookings")
                        .HasForeignKey("CenterId")
                        .IsRequired()
                        .HasConstraintName("FK_Book_Centers");

                    b.HasOne("EVServiceCenter.Domain.Entities.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Book_Customers");

                    b.HasOne("EVServiceCenter.Domain.Entities.TimeSlot", "EndSlot")
                        .WithMany("BookingEndSlots")
                        .HasForeignKey("EndSlotId")
                        .IsRequired()
                        .HasConstraintName("FK_Book_EndSlot");

                    b.HasOne("EVServiceCenter.Domain.Entities.TimeSlot", "StartSlot")
                        .WithMany("BookingStartSlots")
                        .HasForeignKey("StartSlotId")
                        .IsRequired()
                        .HasConstraintName("FK_Book_StartSlot");

                    b.HasOne("EVServiceCenter.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("FK_Book_Vehicles");

                    b.Navigation("Center");

                    b.Navigation("Customer");

                    b.Navigation("EndSlot");

                    b.Navigation("StartSlot");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.BookingService", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingServices")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_BS_Bookings");

                    b.HasOne("EVServiceCenter.Domain.Entities.Service", "Service")
                        .WithMany("BookingServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_BS_Services");

                    b.Navigation("Booking");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.BookingTimeSlot", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingTimeSlots")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_BTS_Bookings");

                    b.HasOne("EVServiceCenter.Domain.Entities.TimeSlot", "Slot")
                        .WithMany("BookingTimeSlots")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("FK_BTS_TimeSlots");

                    b.HasOne("EVServiceCenter.Domain.Entities.Technician", "Technician")
                        .WithMany("BookingTimeSlots")
                        .HasForeignKey("TechnicianId")
                        .IsRequired()
                        .HasConstraintName("FK_BTS_Technicians");

                    b.Navigation("Booking");

                    b.Navigation("Slot");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Customer", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("EVServiceCenter.Domain.Entities.Customer", "UserId")
                        .HasConstraintName("FK_Customers_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.ServiceCenter", "Center")
                        .WithMany("Inventories")
                        .HasForeignKey("CenterId")
                        .IsRequired()
                        .HasConstraintName("FK_Inv_Centers");

                    b.HasOne("EVServiceCenter.Domain.Entities.Part", "Part")
                        .WithMany("Inventories")
                        .HasForeignKey("PartId")
                        .IsRequired()
                        .HasConstraintName("FK_Inv_Parts");

                    b.Navigation("Center");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.InventoryBalance", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Part", "Part")
                        .WithMany("InventoryBalances")
                        .HasForeignKey("PartId")
                        .IsRequired()
                        .HasConstraintName("FK_InventoryBalances_Parts");

                    b.HasOne("EVServiceCenter.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("InventoryBalances")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_InventoryBalances_Warehouses");

                    b.Navigation("Part");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.InventoryTransaction", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Part", "Part")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("PartId")
                        .IsRequired()
                        .HasConstraintName("FK_InvTrans_Parts");

                    b.HasOne("EVServiceCenter.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_InvTrans_Warehouses");

                    b.Navigation("Part");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.InventoryTransfer", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Warehouse", "FromWarehouse")
                        .WithMany("InventoryTransferFromWarehouses")
                        .HasForeignKey("FromWarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_InvTransfers_FromWh");

                    b.HasOne("EVServiceCenter.Domain.Entities.Warehouse", "ToWarehouse")
                        .WithMany("InventoryTransferToWarehouses")
                        .HasForeignKey("ToWarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_InvTransfers_ToWh");

                    b.Navigation("FromWarehouse");

                    b.Navigation("ToWarehouse");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.InventoryTransferItem", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Part", "Part")
                        .WithMany("InventoryTransferItems")
                        .HasForeignKey("PartId")
                        .IsRequired()
                        .HasConstraintName("FK_InvTransferItems_Part");

                    b.HasOne("EVServiceCenter.Domain.Entities.InventoryTransfer", "Transfer")
                        .WithMany("InventoryTransferItems")
                        .HasForeignKey("TransferId")
                        .IsRequired()
                        .HasConstraintName("FK_InvTransferItems_Transfer");

                    b.Navigation("Part");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Invoices_Customers");

                    b.HasOne("EVServiceCenter.Domain.Entities.WorkOrder", "WorkOrder")
                        .WithMany("Invoices")
                        .HasForeignKey("WorkOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoices_WorkOrders");

                    b.Navigation("Customer");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.InvoiceItem", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK__InvoiceIt__Invoi__30441BD6");

                    b.HasOne("EVServiceCenter.Domain.Entities.Part", "Part")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("PartId")
                        .HasConstraintName("FK__InvoiceIt__PartI__3138400F");

                    b.Navigation("Invoice");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.InvoicePayment", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK__InvoicePa__Invoi__2B7F66B9");

                    b.HasOne("EVServiceCenter.Domain.Entities.Payment", "Payment")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("PaymentId")
                        .IsRequired()
                        .HasConstraintName("FK__InvoicePa__Payme__2C738AF2");

                    b.Navigation("Invoice");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.LeaveRequest", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.User", "ApprovedByNavigation")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("FK_LR_Approver");

                    b.HasOne("EVServiceCenter.Domain.Entities.Technician", "Technician")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("TechnicianId")
                        .IsRequired()
                        .HasConstraintName("FK_LR_Tech");

                    b.Navigation("ApprovedByNavigation");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceChecklist", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.WorkOrder", "WorkOrder")
                        .WithMany("MaintenanceChecklists")
                        .HasForeignKey("WorkOrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Maintenan__WorkO__54B68676");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceChecklistResult", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.MaintenanceChecklist", "Checklist")
                        .WithMany("MaintenanceChecklistResults")
                        .HasForeignKey("ChecklistId")
                        .IsRequired()
                        .HasConstraintName("FK__Maintenan__Check__5887175A");

                    b.HasOne("EVServiceCenter.Domain.Entities.MaintenanceChecklistItem", "Item")
                        .WithMany("MaintenanceChecklistResults")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK__Maintenan__ItemI__597B3B93");

                    b.Navigation("Checklist");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceReminder", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("MaintenanceReminders")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("FK_MR_Vehicles");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Notification", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Noti_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Otpcode", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.User", "User")
                        .WithMany("Otpcodes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_OTPCodes_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Payment", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_Payments_Invoices");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.SalesOrder", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.ServiceCenter", "Center")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CenterId")
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrders_ServiceCtrs");

                    b.HasOne("EVServiceCenter.Domain.Entities.Channel", "Channel")
                        .WithMany("SalesOrders")
                        .HasForeignKey("ChannelId")
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrders_Channels");

                    b.HasOne("EVServiceCenter.Domain.Entities.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_SalesOrders_Customers");

                    b.HasOne("EVServiceCenter.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("SalesOrders")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrders_Warehouses");

                    b.Navigation("Center");

                    b.Navigation("Channel");

                    b.Navigation("Customer");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.SalesOrderItem", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Part", "Part")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("PartId")
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrderItems_Parts");

                    b.HasOne("EVServiceCenter.Domain.Entities.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("SalesOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrderItems_Order");

                    b.Navigation("Part");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Service", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.ServiceCategory", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Services_Categories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServiceCategory", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.ServiceCategory", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK_ServiceCategories_Parent");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServicePackageItem", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.ServicePackage", "Package")
                        .WithMany("ServicePackageItems")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("FK_SPI_Packages");

                    b.HasOne("EVServiceCenter.Domain.Entities.Service", "Service")
                        .WithMany("ServicePackageItems")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_SPI_Services");

                    b.Navigation("Package");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Staff", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.ServiceCenter", "Center")
                        .WithMany("Staff")
                        .HasForeignKey("CenterId")
                        .IsRequired()
                        .HasConstraintName("FK_Staff_Centers");

                    b.HasOne("EVServiceCenter.Domain.Entities.User", "User")
                        .WithMany("Staff")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Staff_Users");

                    b.Navigation("Center");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Technician", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.ServiceCenter", "Center")
                        .WithMany("Technicians")
                        .HasForeignKey("CenterId")
                        .IsRequired()
                        .HasConstraintName("FK_Tech_Centers");

                    b.HasOne("EVServiceCenter.Domain.Entities.User", "User")
                        .WithMany("Technicians")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Tech_Users");

                    b.Navigation("Center");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.TechnicianTimeSlot", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.TimeSlot", "Slot")
                        .WithMany("TechnicianTimeSlots")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("FK_TTS_Slot");

                    b.HasOne("EVServiceCenter.Domain.Entities.Technician", "Technician")
                        .WithMany("TechnicianTimeSlots")
                        .HasForeignKey("TechnicianId")
                        .IsRequired()
                        .HasConstraintName("FK_TTS_Tech");

                    b.Navigation("Slot");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.UserPromotion", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Customer", "Customer")
                        .WithMany("UserPromotions")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_UserPromotions_Customers");

                    b.HasOne("EVServiceCenter.Domain.Entities.Invoice", "Invoice")
                        .WithMany("UserPromotions")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_UserPromotions_Invoices");

                    b.HasOne("EVServiceCenter.Domain.Entities.Promotion", "Promotion")
                        .WithMany("UserPromotions")
                        .HasForeignKey("PromotionId")
                        .IsRequired()
                        .HasConstraintName("FK_UserPromotions_Promotions");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Customer", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Vehicles_Customers");

                    b.HasOne("EVServiceCenter.Domain.Entities.VehicleModel", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelId")
                        .IsRequired()
                        .HasConstraintName("FK_Vehicles_Models");

                    b.Navigation("Customer");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.ServiceCenter", "Center")
                        .WithMany("Warehouses")
                        .HasForeignKey("CenterId")
                        .IsRequired()
                        .HasConstraintName("FK_Warehouses_ServiceCenters");

                    b.Navigation("Center");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.WeeklySchedule", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.ServiceCenter", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId");

                    b.Navigation("Location");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.WorkOrder", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Booking", "Booking")
                        .WithMany("WorkOrders")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_WO_Bookings");

                    b.HasOne("EVServiceCenter.Domain.Entities.Technician", "Technician")
                        .WithMany("WorkOrders")
                        .HasForeignKey("TechnicianId")
                        .IsRequired()
                        .HasConstraintName("FK_WO_Technicians");

                    b.Navigation("Booking");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.WorkOrderChargeProposal", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderChargeProposals")
                        .HasForeignKey("WorkOrderId")
                        .IsRequired()
                        .HasConstraintName("FK__WorkOrder__WorkO__200DB40D");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.WorkOrderChargeProposalItem", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Part", "Part")
                        .WithMany("WorkOrderChargeProposalItems")
                        .HasForeignKey("PartId")
                        .HasConstraintName("FK__WorkOrder__PartI__25C68D63");

                    b.HasOne("EVServiceCenter.Domain.Entities.WorkOrderChargeProposal", "Proposal")
                        .WithMany("WorkOrderChargeProposalItems")
                        .HasForeignKey("ProposalId")
                        .IsRequired()
                        .HasConstraintName("FK__WorkOrder__Propo__24D2692A");

                    b.Navigation("Part");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.WorkOrderPart", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Part", "Part")
                        .WithMany("WorkOrderParts")
                        .HasForeignKey("PartId")
                        .IsRequired()
                        .HasConstraintName("FK_WOP_Parts");

                    b.HasOne("EVServiceCenter.Domain.Entities.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderParts")
                        .HasForeignKey("WorkOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_WOP_WorkOrders");

                    b.Navigation("Part");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingServices");

                    b.Navigation("BookingTimeSlots");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Channel", b =>
                {
                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Invoices");

                    b.Navigation("SalesOrders");

                    b.Navigation("UserPromotions");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.InventoryTransfer", b =>
                {
                    b.Navigation("InventoryTransferItems");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");

                    b.Navigation("InvoicePayments");

                    b.Navigation("Payments");

                    b.Navigation("UserPromotions");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceChecklist", b =>
                {
                    b.Navigation("MaintenanceChecklistResults");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceChecklistItem", b =>
                {
                    b.Navigation("MaintenanceChecklistResults");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Part", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("InventoryBalances");

                    b.Navigation("InventoryTransactions");

                    b.Navigation("InventoryTransferItems");

                    b.Navigation("InvoiceItems");

                    b.Navigation("SalesOrderItems");

                    b.Navigation("WorkOrderChargeProposalItems");

                    b.Navigation("WorkOrderParts");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Payment", b =>
                {
                    b.Navigation("InvoicePayments");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Promotion", b =>
                {
                    b.Navigation("UserPromotions");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.SalesOrder", b =>
                {
                    b.Navigation("SalesOrderItems");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Service", b =>
                {
                    b.Navigation("BookingServices");

                    b.Navigation("ServicePackageItems");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServiceCategory", b =>
                {
                    b.Navigation("InverseParentCategory");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServiceCenter", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Inventories");

                    b.Navigation("SalesOrders");

                    b.Navigation("Staff");

                    b.Navigation("Technicians");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServicePackage", b =>
                {
                    b.Navigation("ServicePackageItems");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Technician", b =>
                {
                    b.Navigation("BookingTimeSlots");

                    b.Navigation("LeaveRequests");

                    b.Navigation("TechnicianTimeSlots");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.TimeSlot", b =>
                {
                    b.Navigation("BookingEndSlots");

                    b.Navigation("BookingStartSlots");

                    b.Navigation("BookingTimeSlots");

                    b.Navigation("TechnicianTimeSlots");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.User", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("LeaveRequests");

                    b.Navigation("Notifications");

                    b.Navigation("Otpcodes");

                    b.Navigation("Staff");

                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MaintenanceReminders");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.VehicleModel", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("InventoryBalances");

                    b.Navigation("InventoryTransactions");

                    b.Navigation("InventoryTransferFromWarehouses");

                    b.Navigation("InventoryTransferToWarehouses");

                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.WorkOrder", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("MaintenanceChecklists");

                    b.Navigation("WorkOrderChargeProposals");

                    b.Navigation("WorkOrderParts");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.WorkOrderChargeProposal", b =>
                {
                    b.Navigation("WorkOrderChargeProposalItems");
                });
#pragma warning restore 612, 618
        }
    }
}
