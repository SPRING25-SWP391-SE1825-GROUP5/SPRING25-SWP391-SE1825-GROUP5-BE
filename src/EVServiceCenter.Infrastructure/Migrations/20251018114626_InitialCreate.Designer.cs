// <auto-generated />
using System;
using EVServiceCenter.Infrastructure.Configurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EVServiceCenter.Infrastructure.Migrations
{
    [DbContext(typeof(EVDbContext))]
    [Migration("20251018114626_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int?>("CurrentMileage")
                        .HasColumnType("int")
                        .HasColumnName("CurrentMileage");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("LicensePlate")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LicensePlate");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<int>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("SlotID");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("PENDING");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("TechnicianID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.HasKey("BookingId");

                    b.HasIndex("CenterId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SlotId");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Bookings", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Conversation", b =>
                {
                    b.Property<long>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ConversationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ConversationId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastMessageAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastMessageAt");

                    b.Property<long?>("LastMessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("LastMessageID");

                    b.Property<long?>("LastMessageMessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("ConversationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastMessageAt");

                    b.HasIndex("LastMessageMessageId");

                    b.ToTable("Conversations", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ConversationMember", b =>
                {
                    b.Property<long>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MemberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MemberId"));

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint")
                        .HasColumnName("ConversationID");

                    b.Property<string>("GuestSessionId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("GuestSessionID");

                    b.Property<DateTime?>("LastReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleInConversation")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("MemberId");

                    b.HasIndex("GuestSessionId")
                        .HasDatabaseName("IX_ConversationMembers_Guest");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ConversationMembers_User");

                    b.HasIndex("ConversationId", "GuestSessionId")
                        .HasDatabaseName("UX_ConversationMembers_Conversation_Guest");

                    b.HasIndex("ConversationId", "UserId")
                        .HasDatabaseName("UX_ConversationMembers_Conversation_User");

                    b.ToTable("ConversationMembers", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<bool>("IsGuest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("Customers", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.CustomerServiceCredit", b =>
                {
                    b.Property<int>("CreditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("ACTIVE");

                    b.Property<int>("TotalCredits")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UsedCredits")
                        .HasColumnType("int");

                    b.HasKey("CreditId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("PackageId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("Status");

                    b.HasIndex("CustomerId", "ServiceId");

                    b.ToTable("CustomerServiceCredits", "dbo", t =>
                        {
                            t.HasCheckConstraint("CK_CustomerServiceCredits_ExpiryDate", "ExpiryDate IS NULL OR ExpiryDate >= PurchaseDate");

                            t.HasCheckConstraint("CK_CustomerServiceCredits_Status", "Status IN ('ACTIVE', 'EXPIRED', 'USED_UP')");

                            t.HasCheckConstraint("CK_CustomerServiceCredits_TotalCredits", "TotalCredits > 0");

                            t.HasCheckConstraint("CK_CustomerServiceCredits_UsedCredits", "UsedCredits >= 0 AND UsedCredits <= TotalCredits");
                        });
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<bool>("IsAnonymous")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("TechnicianID");

                    b.HasKey("FeedbackId");

                    b.HasIndex("BookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("Feedbacks", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InventoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("InventoryId");

                    b.HasIndex("CenterId")
                        .IsUnique();

                    b.ToTable("Inventory", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.InventoryPart", b =>
                {
                    b.Property<int>("InventoryPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InventoryPartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryPartId"));

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("InventoryID");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("int");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.HasKey("InventoryPartId");

                    b.HasIndex("PartId");

                    b.HasIndex("InventoryId", "PartId")
                        .IsUnique();

                    b.ToTable("InventoryParts", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("DRAFT");

                    b.HasKey("InvoiceId");

                    b.HasIndex("BookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("Status");

                    b.ToTable("Invoices", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceChecklist", b =>
                {
                    b.Property<int>("ChecklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChecklistID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChecklistId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int")
                        .HasColumnName("TemplateId");

                    b.HasKey("ChecklistId");

                    b.HasIndex("BookingId");

                    b.ToTable("MaintenanceChecklists", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceChecklistResult", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ResultID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<int>("ChecklistId")
                        .HasColumnType("int")
                        .HasColumnName("ChecklistID");

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<string>("Result")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ResultId");

                    b.HasIndex("ChecklistId");

                    b.HasIndex("PartId");

                    b.ToTable("MaintenanceChecklistResults", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceReminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReminderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderId"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date");

                    b.Property<int?>("DueMileage")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.HasKey("ReminderId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("VehicleId");

                    b.ToTable("MaintenanceReminders", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Message", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MessageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MessageId"));

                    b.Property<string>("AttachmentUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint")
                        .HasColumnName("ConversationID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<long?>("ReplyToMessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("ReplyToMessageID");

                    b.Property<string>("SenderGuestSessionId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("SenderGuestSessionID");

                    b.Property<int?>("SenderUserId")
                        .HasColumnType("int")
                        .HasColumnName("SenderUserID");

                    b.HasKey("MessageId");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex("ConversationId", "CreatedAt");

                    b.HasIndex("SenderGuestSessionId", "CreatedAt");

                    b.HasIndex("SenderUserId", "CreatedAt");

                    b.ToTable("Messages", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("PENDING");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartId");

                    b.ToTable("OrderItems", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Otpcode", b =>
                {
                    b.Property<int>("Otpid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OTPID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Otpid"));

                    b.Property<int>("AttemptCount")
                        .HasColumnType("int");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime>("ExpiresAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Otpcode1")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("OTPCode");

                    b.Property<string>("Otptype")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OTPType");

                    b.Property<DateTime?>("UsedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Otpid");

                    b.HasIndex("UserId");

                    b.ToTable("OTPCodes", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Part", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(3, 2)");

                    b.HasKey("PartId");

                    b.HasIndex("PartNumber")
                        .IsUnique();

                    b.ToTable("Parts", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.PartCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName");

                    b.HasIndex("IsActive");

                    b.HasIndex("ParentId");

                    b.ToTable("PartCategories", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.PartCategoryMap", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("PartId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsPrimary");

                    b.HasIndex("PartId");

                    b.ToTable("PartCategoryMaps", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<DateTime?>("PaidAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("PaidByUserID")
                        .HasColumnType("int")
                        .HasColumnName("PaidByUserID");

                    b.Property<string>("PaymentCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("PAYOS");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("PENDING");

                    b.HasKey("PaymentId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PaidByUserID");

                    b.HasIndex("PaymentCode")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("Payments", "dbo", t =>
                        {
                            t.HasTrigger("tr_Payments_DefaultBuyerFromInvoice");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PromotionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("MaxDiscount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal?>("MinOrderAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.Property<int?>("UsageLimit")
                        .HasColumnType("int");

                    b.HasKey("PromotionId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("StartDate", "EndDate");

                    b.HasIndex("Status", "StartDate", "EndDate");

                    b.ToTable("Promotions", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServiceCenter", b =>
                {
                    b.Property<int>("CenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CenterId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CenterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CenterId");

                    b.ToTable("ServiceCenters", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServiceChecklistTemplate", b =>
                {
                    b.Property<int>("TemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TemplateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ServiceID")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TemplateID");

                    b.HasIndex("ServiceID");

                    b.ToTable("ServiceChecklistTemplates", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServiceChecklistTemplateItem", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("PartID")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<int>("TemplateID")
                        .HasColumnType("int")
                        .HasColumnName("TemplateID");

                    b.HasKey("ItemID");

                    b.HasIndex("PartID");

                    b.HasIndex("TemplateID", "PartID")
                        .IsUnique();

                    b.ToTable("ServiceChecklistTemplateItems", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServicePackage", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PackageCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("TotalCredits")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("PackageId");

                    b.HasIndex("PackageCode")
                        .IsUnique();

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicePackages", "dbo", t =>
                        {
                            t.HasCheckConstraint("CK_ServicePackages_DiscountPercent", "DiscountPercent >= 0 AND DiscountPercent <= 100");

                            t.HasCheckConstraint("CK_ServicePackages_Price", "Price >= 0");

                            t.HasCheckConstraint("CK_ServicePackages_TotalCredits", "TotalCredits > 0");

                            t.HasCheckConstraint("CK_ServicePackages_ValidDates", "ValidFrom IS NULL OR ValidTo IS NULL OR ValidFrom <= ValidTo");
                        });
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("StaffId");

                    b.HasIndex("CenterId");

                    b.HasIndex("UserId");

                    b.ToTable("Staff", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.SystemSetting", b =>
                {
                    b.Property<string>("SettingKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("SettingKey");

                    b.ToTable("SystemSettings", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Technician", b =>
                {
                    b.Property<int>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TechnicianID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicianId"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("CenterID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TechnicianId");

                    b.HasIndex("CenterId");

                    b.HasIndex("UserId");

                    b.ToTable("Technicians", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.TechnicianTimeSlot", b =>
                {
                    b.Property<int>("TechnicianSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TechnicianSlotID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicianSlotId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("SlotID");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("TechnicianID");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TechnicianSlotId");

                    b.HasIndex("BookingId");

                    b.HasIndex("SlotId");

                    b.HasIndex("WorkDate", "SlotId");

                    b.HasIndex("TechnicianId", "WorkDate", "SlotId")
                        .IsUnique();

                    b.ToTable("TechnicianTimeSlots", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.TimeSlot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SlotID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotId"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("SlotLabel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeSpan>("SlotTime")
                        .HasColumnType("time");

                    b.HasKey("SlotId");

                    b.HasIndex("SlotTime")
                        .IsUnique();

                    b.ToTable("TimeSlots", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RefreshToken")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.UserPromotion", b =>
                {
                    b.Property<int>("UserPromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserPromotionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPromotionId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("PromotionID");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("USED");

                    b.Property<DateTime>("UsedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("UserPromotionId");

                    b.HasIndex("BookingId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("CustomerId", "UsedAt")
                        .IsDescending(false, true);

                    b.HasIndex("PromotionId", "BookingId")
                        .IsUnique()
                        .HasFilter("[BookingID] IS NOT NULL");

                    b.HasIndex("PromotionId", "OrderId")
                        .IsUnique()
                        .HasFilter("[OrderID] IS NOT NULL");

                    b.HasIndex("PromotionId", "UsedAt")
                        .IsDescending(false, true);

                    b.ToTable("UserPromotions", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("CurrentMileage")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateOnly?>("LastServiceDate")
                        .HasColumnType("date");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("ModelID");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)")
                        .HasColumnName("VIN");

                    b.HasKey("VehicleId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.HasIndex("ModelId");

                    b.HasIndex("Vin")
                        .IsUnique();

                    b.ToTable("Vehicles", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.VehicleModel", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Version");

                    b.HasKey("ModelId");

                    b.HasIndex("ModelName")
                        .IsUnique();

                    b.ToTable("VehicleModel", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.VehicleModelPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("ModelID");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("ModelId", "PartId")
                        .IsUnique();

                    b.ToTable("VehicleModelParts", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.WorkOrderPart", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartID");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("VehicleModelPartId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleModelPartID");

                    b.HasKey("BookingId", "PartId");

                    b.HasIndex("PartId");

                    b.HasIndex("VehicleModelPartId");

                    b.ToTable("WorkOrderParts", "dbo");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Booking", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.ServiceCenter", "Center")
                        .WithMany("Bookings")
                        .HasForeignKey("CenterId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.TimeSlot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.Technician", "Technician")
                        .WithMany("Bookings")
                        .HasForeignKey("TechnicianId");

                    b.HasOne("EVServiceCenter.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleId")
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Customer");

                    b.Navigation("Service");

                    b.Navigation("Slot");

                    b.Navigation("Technician");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Customer", null)
                        .WithMany("Conversations")
                        .HasForeignKey("CustomerId");

                    b.HasOne("EVServiceCenter.Domain.Entities.Message", "LastMessage")
                        .WithMany()
                        .HasForeignKey("LastMessageMessageId");

                    b.Navigation("LastMessage");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ConversationMember", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Conversation", "Conversation")
                        .WithMany("ConversationMembers")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Customer", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("EVServiceCenter.Domain.Entities.Customer", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.CustomerServiceCredit", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.ServicePackage", "ServicePackage")
                        .WithMany("CustomerServiceCredits")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Service");

                    b.Navigation("ServicePackage");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("EVServiceCenter.Domain.Entities.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVServiceCenter.Domain.Entities.Order", "Order")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderId");

                    b.HasOne("EVServiceCenter.Domain.Entities.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVServiceCenter.Domain.Entities.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Booking");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Part");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.ServiceCenter", "Center")
                        .WithMany("Inventories")
                        .HasForeignKey("CenterId")
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.InventoryPart", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Inventory", "Inventory")
                        .WithMany("InventoryParts")
                        .HasForeignKey("InventoryId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.Part", "Part")
                        .WithMany("InventoryParts")
                        .HasForeignKey("PartId")
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Booking", "Booking")
                        .WithMany("Invoices")
                        .HasForeignKey("BookingId");

                    b.HasOne("EVServiceCenter.Domain.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId");

                    b.HasOne("EVServiceCenter.Domain.Entities.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId");

                    b.Navigation("Booking");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceChecklist", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceChecklistResult", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.MaintenanceChecklist", "Checklist")
                        .WithMany("MaintenanceChecklistResults")
                        .HasForeignKey("ChecklistId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId");

                    b.Navigation("Checklist");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceReminder", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("EVServiceCenter.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("MaintenanceReminders")
                        .HasForeignKey("VehicleId")
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Message", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.Message", "ReplyToMessage")
                        .WithMany()
                        .HasForeignKey("ReplyToMessageId");

                    b.HasOne("EVServiceCenter.Domain.Entities.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId");

                    b.Navigation("Conversation");

                    b.Navigation("ReplyToMessage");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Notification", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Order", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.Part", "Part")
                        .WithMany("OrderItems")
                        .HasForeignKey("PartId")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Otpcode", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.User", "User")
                        .WithMany("Otpcodes")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.PartCategory", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.PartCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.PartCategoryMap", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.PartCategory", "Category")
                        .WithMany("PartCategoryMaps")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Payment", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("PaidByUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServiceChecklistTemplate", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServiceChecklistTemplateItem", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Part", null)
                        .WithMany()
                        .HasForeignKey("PartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.ServiceChecklistTemplate", null)
                        .WithMany()
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServicePackage", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Staff", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.ServiceCenter", "Center")
                        .WithMany("Staff")
                        .HasForeignKey("CenterId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.User", "User")
                        .WithMany("Staff")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Technician", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.ServiceCenter", "Center")
                        .WithMany("Technicians")
                        .HasForeignKey("CenterId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.User", "User")
                        .WithMany("Technicians")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.TechnicianTimeSlot", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("EVServiceCenter.Domain.Entities.TimeSlot", "Slot")
                        .WithMany("TechnicianTimeSlots")
                        .HasForeignKey("SlotId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.Technician", "Technician")
                        .WithMany("TechnicianTimeSlots")
                        .HasForeignKey("TechnicianId")
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Slot");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.UserPromotion", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("EVServiceCenter.Domain.Entities.Customer", "Customer")
                        .WithMany("UserPromotions")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("EVServiceCenter.Domain.Entities.Promotion", "Promotion")
                        .WithMany("UserPromotions")
                        .HasForeignKey("PromotionId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("Booking");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Promotion");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Customer", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.VehicleModelPart", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.VehicleModel", "VehicleModel")
                        .WithMany("VehicleModelParts")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.Part", "Part")
                        .WithMany("VehicleModelParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.WorkOrderPart", b =>
                {
                    b.HasOne("EVServiceCenter.Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.Part", "Part")
                        .WithMany("WorkOrderParts")
                        .HasForeignKey("PartId")
                        .IsRequired();

                    b.HasOne("EVServiceCenter.Domain.Entities.VehicleModelPart", "VehicleModelPart")
                        .WithMany()
                        .HasForeignKey("VehicleModelPartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Booking");

                    b.Navigation("Part");

                    b.Navigation("VehicleModelPart");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Booking", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("ConversationMembers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Conversations");

                    b.Navigation("Feedbacks");

                    b.Navigation("Invoices");

                    b.Navigation("Orders");

                    b.Navigation("UserPromotions");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Inventory", b =>
                {
                    b.Navigation("InventoryParts");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.MaintenanceChecklist", b =>
                {
                    b.Navigation("MaintenanceChecklistResults");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Order", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Invoices");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Part", b =>
                {
                    b.Navigation("InventoryParts");

                    b.Navigation("OrderItems");

                    b.Navigation("VehicleModelParts");

                    b.Navigation("WorkOrderParts");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.PartCategory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("PartCategoryMaps");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Promotion", b =>
                {
                    b.Navigation("UserPromotions");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServiceCenter", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Inventories");

                    b.Navigation("Staff");

                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.ServicePackage", b =>
                {
                    b.Navigation("CustomerServiceCredits");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Technician", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TechnicianTimeSlots");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.TimeSlot", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TechnicianTimeSlots");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.User", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("Otpcodes");

                    b.Navigation("Staff");

                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MaintenanceReminders");
                });

            modelBuilder.Entity("EVServiceCenter.Domain.Entities.VehicleModel", b =>
                {
                    b.Navigation("VehicleModelParts");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
